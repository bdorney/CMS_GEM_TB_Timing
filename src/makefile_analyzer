# Define the compiler
CC = g++

# Define any compile-time flags
#CFLAGS = -c `root-config --cflags --glibs --libs` -std=c++11	#the -c option causes this to compile but not link, problem!!!
CFLAGS = `root-config --cflags --glibs --libs` -std=c++11

# Define any directories containing header files other than "/usr/include"
INCLUDES = -I../include

# Define source files
SOURCES = treeAnalyzer.cpp treeAnalyzerTDC.cpp analyzeTree.cpp

# Define object files
#	We use Suffix Replacement
#	$(name:string1=string2)
#		for each owrd in 'name' we will replace 'string1' with 'string2'
#	Here we replace all ".cpp" with ".o" when defining the objects
OBJECTS = $(SOURCES:.cpp=.o)

# Define the executable
EXEC = analyzeTree

# Define default behavior
#default: $(EXEC)

# To create the analyzeTree executable we will need the following object files:
# 	analyzeTree.o 
#	treeAnalyzer.o 
#	treeAnalyzerTDC.o

.PHONY: depend clean

all:	$(EXEC)
	@echo	Compiling $(EXEC)

$(EXEC): $(OBJECTS)
	$(CC) $(CFLAGS) $(INCLUDES) -o $(EXEC) $(OBJECTS)

# Here we use Suffix Replacement to building our object files
# we use automatic variables $<: the name of the prerequisite of 
# the rule (*.cpp file) and $@: the name of the target (*.o file)
# (you should review the gnu make manual, sec. on auto. variables)

.cpp.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

clean:
	$(RM) *.o *~ $(EXEC)

depend: $(SOURCES)
	makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it
